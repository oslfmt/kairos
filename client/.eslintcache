[{"/home/victor/kairos/client/src/index.js":"1","/home/victor/kairos/client/src/App.js":"2","/home/victor/kairos/client/src/reportWebVitals.js":"3","/home/victor/kairos/client/src/components/SignUpForm.js":"4","/home/victor/kairos/client/src/components/views/JobForm.js":"5","/home/victor/kairos/client/src/components/views/Home.js":"6","/home/victor/kairos/client/src/components/layout/Header.js":"7","/home/victor/kairos/client/src/components/layout/Footer.js":"8","/home/victor/kairos/client/src/components/search/BrowseGrid.js":"9","/home/victor/kairos/client/src/components/dashboard/Dashboard.js":"10","/home/victor/kairos/client/src/components/dashboard/FreelancerDashboard.js":"11","/home/victor/kairos/client/src/components/Job/Job.js":"12","/home/victor/kairos/client/src/components/Freelancer.js":"13","/home/victor/kairos/client/src/components/search/CustomSearchBox.js":"14","/home/victor/kairos/client/src/components/layout/HomeHeader.js":"15","/home/victor/kairos/client/src/components/dashboard/PostsGrid.js":"16","/home/victor/kairos/client/src/components/dashboard/Profile.js":"17","/home/victor/kairos/client/src/components/Job/JobDeck.js":"18","/home/victor/kairos/client/src/components/UserIconDropDown.js":"19","/home/victor/kairos/client/src/helper/auth.js":"20","/home/victor/kairos/client/src/helper/form.js":"21","/home/victor/kairos/client/src/components/Job/JobModalContent.js":"22","/home/victor/kairos/client/src/components/Job/ItemList.js":"23","/home/victor/kairos/client/src/components/dashboard/ActiveJob.js":"24","/home/victor/kairos/client/src/components/LogoutButton.js":"25"},{"size":1278,"mtime":1624486179315,"results":"26","hashOfConfig":"27"},{"size":4490,"mtime":1624897143528,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1608261632597,"results":"29","hashOfConfig":"27"},{"size":2542,"mtime":1623425736523,"results":"30","hashOfConfig":"27"},{"size":6931,"mtime":1624663437961,"results":"31","hashOfConfig":"27"},{"size":5299,"mtime":1623425937516,"results":"32","hashOfConfig":"27"},{"size":2177,"mtime":1623425736527,"results":"33","hashOfConfig":"27"},{"size":1675,"mtime":1617470403242,"results":"34","hashOfConfig":"27"},{"size":2339,"mtime":1614012369903,"results":"35","hashOfConfig":"27"},{"size":4301,"mtime":1623425736527,"results":"36","hashOfConfig":"27"},{"size":215,"mtime":1621193034229,"results":"37","hashOfConfig":"27"},{"size":3131,"mtime":1623425736523,"results":"38","hashOfConfig":"27"},{"size":1003,"mtime":1617470403238,"results":"39","hashOfConfig":"27"},{"size":2942,"mtime":1614012369903,"results":"40","hashOfConfig":"27"},{"size":2535,"mtime":1624487311218,"results":"41","hashOfConfig":"27"},{"size":503,"mtime":1623425736527,"results":"42","hashOfConfig":"27"},{"size":3208,"mtime":1623425736527,"results":"43","hashOfConfig":"27"},{"size":347,"mtime":1614012369903,"results":"44","hashOfConfig":"27"},{"size":4339,"mtime":1623425736527,"results":"45","hashOfConfig":"27"},{"size":2052,"mtime":1621193034229,"results":"46","hashOfConfig":"27"},{"size":595,"mtime":1621780770835,"results":"47","hashOfConfig":"27"},{"size":1036,"mtime":1614012369903,"results":"48","hashOfConfig":"27"},{"size":448,"mtime":1614012369903,"results":"49","hashOfConfig":"27"},{"size":951,"mtime":1617470403238,"results":"50","hashOfConfig":"27"},{"size":378,"mtime":1623425736523,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1bt5dlk",{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/victor/kairos/client/src/index.js",[],["108","109"],"/home/victor/kairos/client/src/App.js",["110","111","112","113","114"],"/home/victor/kairos/client/src/reportWebVitals.js",[],"/home/victor/kairos/client/src/components/SignUpForm.js",[],"/home/victor/kairos/client/src/components/views/JobForm.js",["115","116"],"import React, { useState } from 'react';\nimport { TileDocument } from '@ceramicnetwork/stream-tile';\n\n// KEEP IN MIND: this can be filling out a kleros contract instead\nfunction JobForms(props) {\n  const ceramic = props.ceramic;\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [skills, setSkills] = useState([]);\n  const [otherSkills, setOtherSkills] = useState(\"\");\n  const [payments, setPayments] = useState([]);\n  const [price, setPrice] = useState(0);\n\n  const handleInputChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        break;\n      case 'description':\n        setDescription(value);\n        break;\n      case 'price':\n        setPrice(value);\n        break;\n      case 'otherSkills':\n        setOtherSkills(value);\n        break;\n    }\n  }\n\n  const handleCheckbox = (e) => {\n\t\tlet array; // array for holding checkbox state\n\n\t\t// check if the checkbox belongs to checkbox-list of \"skills\" or \"payments\"\n\t\tconst checkboxGroup = e.target.parentElement.parentElement.classList[1];\n    // set the array to a copy of state array\n\t\tif (checkboxGroup === \"skills\") {\n\t\t\tarray = skills.slice();\n\t\t} else if (checkboxGroup === \"paymentForms\") {\n\t\t\tarray = payments.slice();\n\t\t}\n\n\t\tconst value = e.target.nextSibling.innerText;\n\t\t// if element not in array, it must be checked so push it to\n\t\t// the array; otherwise, unchecked, so remove from array\n\t\tif (!array.find(elem => elem === value)) {\n\t\t\tarray.push(value);\n\t\t} else {\n\t\t\tlet index = array.indexOf(value);\n\t\t\tarray.splice(index, 1);\n\t\t}\n\n\t\t// set state to new array\n    if (checkboxGroup === \"skills\") {\n      setSkills(array);\n    } else {\n      setPayments(array);\n    }\n  }\n\n  const\thandleValidation = (e) => {\n\t\te.preventDefault();\n\n\t\tlet errors = 0;\n\t\tif (title === \"\") {\n\t\t\tdocument.querySelector(\"#title-error\").classList.remove('d-none');\n\t\t\terrors = 1;\n\t\t} else {\n\t\t\tdocument.querySelector(\"#title-error\").classList.add('d-none');\n\t\t}\n\t\t\n\t\tif (description === \"\") {\n\t\t\tdocument.querySelector(\"#desc-error\").classList.remove('d-none');\n\t\t\terrors = 1;\n\t\t} else {\n\t\t\tdocument.querySelector(\"#desc-error\").classList.add('d-none');\n\t\t}\n\n\t\t// submit form if no errors\n\t\tif (!errors) {\n\t\t\thandleSubmit();\n\t\t\t// update UI with success/failure msg\n\t\t\tdocument.querySelector('.notification').classList.remove('d-none');\n\t\t\tdocument.querySelector('.error-msg').classList.add('d-none');\n\t\t} else {\n\t\t\tdocument.querySelector('.error-msg').classList.remove('d-none');\n\t\t}\n\t}\n\n  const handleSubmit = async () => {\n    // ceramic passed in from props, content from form, metadata is JOB schema and family is JOB\n    const content = { title, description, skills, otherSkills, payments, price };\n\n    const metadata = {\n      family: \"jobs\",\n      schema: 'schemaDoc.commitId'\n    };\n\n    const doc = await TileDocument.create(ceramic, content, metadata);\n\n    // probably save this streamID somewhere to reference it later\n    const streamID = doc.id.toString();\n  }\n  // TODO\n  // 1. deploy schemas and figure out there commits, and how to import them\n  // 2. test submission of jobs and docs are submitted to ceramic streams\n\n  return (\n    <section id=\"postjob\">\n      <div className=\"container mt-5\">\n        <h3 className=\"display-5\">Create a Job</h3>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"project-title\">Title <span>*</span></label>\n            <input \n              id=\"project-title\" \n              type=\"text\"\n              className=\"form-control\"\n              name=\"title\"\n              placeholder=\"Pick a title for your project...\"\n              value={title}\n              onChange={handleInputChange}\n            />\n            <p id=\"title-error\" className=\"small-text font-italic d-none\">Please enter a title</p>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description <span>*</span></label>\n            <textarea \n              className=\"form-control\" \n              id=\"description\" \n              cols=\"30\" \n              rows=\"10\" \n              placeholder=\"Describe your project briefly, including what you would like done\"\n              name=\"description\"\n              value={description}\n              onChange={handleInputChange}\n            />\n            <p id=\"desc-error\" className=\"small-text font-italic d-none\">Please enter a description</p>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"file\">Input any files relating to your project here, such as images, descriptions,etc.</label>\n            <input type=\"file\" className=\"form-control-file\"></input>\n          </div>\n          <div className=\"form-group skills\">\n            <label>Mark any skills related to your job:</label>\n            <Checkbox label=\"Programming\" onChange={handleCheckbox} />\n            <Checkbox label=\"Design\" onChange={handleCheckbox} />\n            <Checkbox label=\"Marketing\" onChange={handleCheckbox} />\n            <Checkbox label=\"Photography\" onChange={handleCheckbox} />\n            <Checkbox label=\"Writing\" onChange={handleCheckbox} />\n            <input \n              style={{width: \"150px\"}} \n              type=\"text\" \n              className=\"form-control\"\n              name=\"otherSkills\"\n              placeholder=\"Other...\"\n              value={otherSkills}\n              onChange={handleInputChange}\n            />\n          </div>\n          <div className=\"form-group paymentForms\">\n            <label>What forms of payment are you willing to pay? <span>*</span></label>\n            <Checkbox label=\"Flat fee\" onChange={handleCheckbox} />\n            <Checkbox label=\"Pay what I want\" onChange={handleCheckbox} />\n            <Checkbox label=\"Endorsement\" onChange={handleCheckbox} />\n            <Checkbox label=\"Open to discussion\" onChange={handleCheckbox} />\n          </div>\n          <div className=\"form-group\">\n            <label>What price range are you willing to pay?</label>\n            <input type=\"text\" className=\"form-control\" name=\"price\" onChange={handleInputChange} />\n            <p id=\"price-error\" className=\"small-text font-italic d-none\">Please enter a price that is a number</p>\n          </div>\n          <button onClick={handleValidation} className=\"btn btn-primary mb-5\">Submit</button>\n        </form>\n        <p className=\"d-none notification\">Job successfully posted!</p>\n        <p className=\"d-none error-msg\">There were errors in submitting this form</p>\n      </div>\n    </section>\n  );\n}\n\nconst Checkbox = (props) => {\n  return (\n    <div className=\"form-check\">\n      <input \n        type=\"checkbox\" \n        className=\"form-check-input\"\n        onChange={props.onChange}\n      />\n      <label className=\"form-check-label\">{props.label}</label>\n    </div>\n  )\n}\n\nexport default JobForms;\n","/home/victor/kairos/client/src/components/views/Home.js",["117"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport CustomSearchBox from '../search/CustomSearchBox';\nimport Job from '../Job/Job.js';\nimport { HomeHeader } from '../layout/HomeHeader';\nimport Footer from '../layout/Footer';\n\nexport default function Home(props) {\n  const [jobs, setJobs] = useState([]);\n\n  // fetch jobs and display\n  // useEffect(() => {\n\t// \taxios.get('http://localhost:4000/')\n\t// \t\t.then(res => {\n  //       setJobs(res.data);\n\t// \t\t})\n\t// \t\t.catch(err => console.error(err));\n  // });\n\n  return (\n    <div>\n      <HomeHeader {...props} />\n      {/* Main section */}\n      <section id=\"main\">\n        <div className=\"container mt-4\">\n          <div className=\"jumbotron bg-transparent\">\n            <div className=\"row align-items-center\">\n              <div className=\"col-8\">\n                <h1 className=\"display-2 pr-3\">Kairos</h1>\n              </div>\n              <div className=\"col-4\">\n                  <Link to=\"/signup\" className=\"btn btn-lg btn-primary\">Join</Link>\n              </div>\n            </div>\n            <div className=\"row pl-5\">\n              <h2 className=\"display-5\">Freelancing For the Community</h2>\n            </div>\n            <div className=\"row pl-5\">\n              <CustomSearchBox />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"services\">\n        <div className=\"container-fluid bg-primary pt-3 mt-5 p-5\">\n          <JobList jobs={jobs} />\n        </div>\n      </section>\n\n      <section id=\"how-it-works\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <h3 className=\"display-4 text-center\">How it Works</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col mt-4\">\n              <p className=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Animi unde, possimus doloremque odio fugit, modi reprehenderit reiciendis laboriosam eius hic iusto recusandae ipsa labore impedit corporis explicabo perferendis repudiandae ad a architecto. Nesciunt vitae quibusdam molestiae, ipsa ut hic repellat corrupti totam deleniti accusantium sit nostrum assumenda! Quaerat dolore deleniti aperiam nesciunt quos ratione quae amet alias aut esse perspiciatis ipsam odit maiores assumenda voluptatem numquam, adipisci, magnam autem dolor. Repellendus similique ullam odit facilis nesciunt, accusamus error optio alias officiis consectetur hic veniam laboriosam asperiores quis dolorum placeat vitae fuga obcaecati architecto eos explicabo velit delectus! Molestiae, numquam suscipit?</p>\n              <p className=\"text-center\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Similique quibusdam expedita necessitatibus quam, voluptatum ea error perferendis aperiam dolore libero minus soluta, vero facilis rem ad architecto! Aliquid atque ullam possimus minus vel modi hic, reiciendis totam, laborum debitis ut blanditiis sit nihil sed ex rem delectus natus, fugiat eum?</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"advantages\" className=\"bg-light\">\n        <div className=\"container\">\n          <div className=\"row mb-4\">\n            <div className=\"col\">\n              <h3 className=\"display-4 text-center\">Advantages</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4 text-right\">\n              <i style={{color: '#27ae60'}} className=\"fas fa-money-bill-wave fa-4x\"></i>\n            </div>\n            <div className=\"col-8 pl-5 mb-4\">\n              <h3 className=\"display-5\">Cheap</h3>\n              <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quisquam sequi quos praesentium sint, exercitationem deleniti illo ea obcaecati mollitia dignissimos.</p>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4 text-right\">\n              <i style={{color: \"#9b59b6\"}} className=\"fas fa-network-wired fa-4x\"></i>\n            </div>\n            <div className=\"col-8 pl-5 mb-4\">\n              <h3 className=\"display-5\">Community Centric</h3>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo aspernatur necessitatibus odit dolor at debitis voluptates tempore ullam ipsa commodi!</p>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4 text-right\">\n              <i style={{color: \"#2c3e50\"}} className=\"fab fa-jedi-order fa-4x mr-3\"></i>\n            </div>\n            <div className=\"col-8 pl-5 mb-4\">\n              <h3 className=\"display-5\">Backed by the Jedi Order</h3>\n              <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Doloribus vitae id aliquid eligendi aperiam autem atque neque eum, temporibus, laborum laboriosam facere! Similique vitae sit aliquid aspernatur explicabo inventore enim!</p>\n            </div>\n          </div>\n        </div>\n      </section>\n      <Footer />\n  </div>\n  );\n}\n\n/**\n * Renders a custom list of jobs fetched from DB\n * @param {*} props \n */\n function JobList(props) {\n\tconst jobList = props.jobs.map(job => (\n\t\t<Job key={job._id} data={job} />\n\t));\n\n\treturn (\n\t\t<div className=\"card-deck\">\n\t\t\t{jobList}\n\t\t</div>\n\t)\n}","/home/victor/kairos/client/src/components/layout/Header.js",[],"/home/victor/kairos/client/src/components/layout/Footer.js",[],"/home/victor/kairos/client/src/components/search/BrowseGrid.js",[],"/home/victor/kairos/client/src/components/dashboard/Dashboard.js",["118"],"import React, { useState, useEffect } from 'react'\nimport Profile from './Profile';\nimport PostsGrid from './PostsGrid';\nimport { Link } from 'react-router-dom'\nimport Header from '../layout/Header';\nimport Footer from '../layout/Footer';\n\nimport { IDX } from '@ceramicstudio/idx';\nimport SignUpForm from '../SignUpForm';\n\nexport default function Dashboard(props) {\n  const ceramic = props.ceramic;\n  const [activePostings, setActivePostings] = useState([]);\n\n  const [cairosProfile, setCairosProfile] = useState(null);\n  const [renderSignup, setRenderSignup] = useState(false);\n  const [idx, setIDX] = useState(null);\n\n  // on component mount, send a GET request to endpoint for user Jobs\n  // set the received jobs array to component state\n  // useEffect(() => {\n  //   axios.get(`http://localhost:4000/dashboard?userID=${user.sub}`)\n  //   .then(res => setActivePostings(res.data))\n  //   .catch(err => console.error(err));\n\n  //   // cleanup function resets the state\n  //   return () => {\n  //     setActivePostings([]);\n  //   }\n  // }, [setActivePostings]);\n\n  // Sets and loads the IDX\n  useEffect(() => {\n    const aliases = {\n      CairosProfile: \"kjzl6cwe1jw145xzqcqoxzuobn1gqznhdlquy1bbc1qnb0wmd91kzfielmpgzea\"\n    };\n    setIDX(new IDX({ ceramic, aliases }));\n  }, [ceramic]);\n\n  // check if index has a CairosProfile record\n  useEffect(() => {\n    const checkCairosProfile = async () => {\n      const hasCairosProfile = await idx.has('CairosProfile', idx.id);\n\n      if (hasCairosProfile) {\n        // load profile on page and don't render signup form\n        const cairosProfile = await idx.get('CairosProfile', idx.id);\n        setCairosProfile(cairosProfile);\n      } else {\n        // render signup form\n        setRenderSignup(true);\n      }\n    }\n\n    if (idx) {\n      checkCairosProfile();\n    }\n  }, [idx])\n\n  const renderPostGrid = (e) => {\n    switch (e.target.name) {\n      case 'active-jobs':\n        console.log('active');\n        break;\n      case 'active-postings':\n        console.log('active-postings');\n        break;\n      case 'completed-jobs':\n        console.log('completed');\n        break;\n      default:\n        console.log('active');\n    }\n  }\n  \n  return (\n    <div>\n      <Header authenticated={props.did} />\n      <div className=\"container-fluid mt-3\">\n        <div className=\"row\">\n          <div className=\"col-4\">\n            <div className=\"navbar bg-light\">\n              <div className=\"nav-item\">\n              <button className=\"btn\" type=\"button\">Dashboard</button>\n              </div>\n              <div className=\"nav-item\">\n              <button className=\"btn\" type=\"button\">Messages</button>\n              </div>\n              <div className=\"nav-item\">\n              <button className=\"btn\" type=\"button\">Settings</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-7\">\n            <div className=\"navbar bg-light\">\n              <div className=\"nav-item\">\n                {/* they should be buttons which have onClick event, which then changes the state of PostsGrid accordingly */}\n                <button className=\"btn\" type=\"button\" name=\"active-jobs\" onClick={renderPostGrid}>Active Jobs</button>\n              </div>\n              <div className=\"nav-item\">\n                <button className=\"btn\" type=\"button\" name=\"active-postings\" onClick={renderPostGrid}>Active Postings ({activePostings.length})</button>\n              </div>\n              <div className=\"nav-item\">\n                <button className=\"btn\" type=\"button\" name=\"completed-jobs\" onClick={renderPostGrid}>Completed Jobs</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-1 align-items-center d-flex\">\n            <Link type=\"button\" to=\"/postjob\" className=\"btn btn-primary\">Post Job</Link>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-4\">\n            {cairosProfile ? <Profile cairosProfile={cairosProfile} setCairosProfile={setCairosProfile} /> : null}\n          </div>\n          <div className=\"col-8\">\n            {cairosProfile ? <PostsGrid activePostings={activePostings} /> : null}\n            {renderSignup ? <SignUpForm idx={idx} /> : null}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","/home/victor/kairos/client/src/components/dashboard/FreelancerDashboard.js",[],"/home/victor/kairos/client/src/components/Job/Job.js",[],"/home/victor/kairos/client/src/components/Freelancer.js",[],["119","120"],"/home/victor/kairos/client/src/components/search/CustomSearchBox.js",[],"/home/victor/kairos/client/src/components/layout/HomeHeader.js",[],"/home/victor/kairos/client/src/components/dashboard/PostsGrid.js",[],"/home/victor/kairos/client/src/components/dashboard/Profile.js",["121"],"import React, { useState } from 'react';\nimport { updateUserMetadata } from '../../helper/auth';\n\nexport default function Profile(props) {\n  const [editMode, setEditMode] = useState(false);\n  const cairosProfile = props.cairosProfile;\n  // might not need this method b/c it only sets the react state\n  const setCairosProfile = props.setCairosProfile;\n\n  const editProfile = () => {\n    // set edit mode to opposite of previous state\n    setEditMode(prevState => !prevState);\n\n    // for each input element, toggle the readOnly attribute\n    const inputElements = document.getElementsByClassName('form-control');\n    for (let elem of inputElements) {\n      elem.readOnly = !elem.readOnly;\n      if(elem.readOnly === false) {elem.value = elem.placeholder;}\n      else{elem.placeholder = elem.value;}\n    }\n    \n    // submit updated data if in edit mode\n    if (editMode) {\n\n    }\n  }\n\n  const handleInput = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    setCairosProfile(prevState => {\n      // this is inefficient because it recopies the entire user object on every input change, when\n      // we really only need to change the user_metadata\n      let newState = { ...prevState };\n      newState.user_metadata[name] = value;\n      return { ...newState, ...prevState };\n    });\n  }\n  \n  return (\n    <div className=\"card-prof\">\n      <div style={{padding: \"10px\"}} className=\"bg-white shadow rounded overflow-hidden mt-3 mb-4\">\n        <div className=\"px-4 pt-0 pb-4 cover-profile\">\n          <div className=\"media align-items-end profile-head-profile\">\n            <div className=\"profile mr-3\">\n              <img className=\"rounded-circle rounded mb-1 img-thumbnail\" style={{height: \"auto\", width: \"auto\"}} src={cairosProfile.image} alt={cairosProfile.name}/>\n            </div>\n            <div className=\"media-body mb-5 text-white\">\n              <h4 className=\"mt-0 mb-0\">{cairosProfile.name}</h4>\n              <p className=\"midium mb-4\"><i className=\"fas fa-map-marker-alt mr-2\"></i>Truman State University</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body\">\n          <p className=\"lead mt-5\">Profile Info</p>\n          <form>\n            <div className=\"form-group\">\n              <label>Organization</label>\n              <input \n                className=\"form-control\" \n                name=\"organization\" \n                onChange={handleInput}\n                placeholder={cairosProfile.affiliations}\n                readOnly />\n            </div>\n            <div className=\"form-group\">\n              <label>Description</label>\n              <input \n                className=\"form-control\" \n                name=\"description\"\n                onChange={handleInput} \n                placeholder={cairosProfile.description}\n                readOnly />\n            </div>\n          </form>\n          {editMode ?\n            <button className=\"btn-success btn-sm\" style={{'float': 'right'}} onClick={editProfile}>Save</button>\n            : \n            <button className=\"btn-primary btn-sm\" style={{'float': 'right'}} onClick={editProfile}>Edit Profile</button>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/victor/kairos/client/src/components/Job/JobDeck.js",[],"/home/victor/kairos/client/src/components/UserIconDropDown.js",[],"/home/victor/kairos/client/src/helper/auth.js",[],"/home/victor/kairos/client/src/helper/form.js",[],"/home/victor/kairos/client/src/components/Job/JobModalContent.js",[],"/home/victor/kairos/client/src/components/Job/ItemList.js",[],"/home/victor/kairos/client/src/components/dashboard/ActiveJob.js",[],"/home/victor/kairos/client/src/components/LogoutButton.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":2,"column":50,"nodeType":"128","messageId":"129","endLine":2,"endColumn":58},{"ruleId":"126","severity":1,"message":"130","line":7,"column":8,"nodeType":"128","messageId":"129","endLine":7,"endColumn":11},{"ruleId":"126","severity":1,"message":"131","line":8,"column":8,"nodeType":"128","messageId":"129","endLine":8,"endColumn":12},{"ruleId":"126","severity":1,"message":"132","line":29,"column":10,"nodeType":"128","messageId":"129","endLine":29,"endColumn":22},{"ruleId":"133","severity":1,"message":"134","line":64,"column":6,"nodeType":"135","endLine":64,"endColumn":15,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":19,"column":5,"nodeType":"139","messageId":"140","endLine":32,"endColumn":6},{"ruleId":"126","severity":1,"message":"141","line":106,"column":11,"nodeType":"128","messageId":"129","endLine":106,"endColumn":19},{"ruleId":"126","severity":1,"message":"142","line":9,"column":16,"nodeType":"128","messageId":"129","endLine":9,"endColumn":23},{"ruleId":"126","severity":1,"message":"143","line":13,"column":26,"nodeType":"128","messageId":"129","endLine":13,"endColumn":43},{"ruleId":"122","replacedBy":"144"},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","severity":1,"message":"146","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":28},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Job' is defined but never used.","'User' is defined but never used.","'TileDocument' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ethereum'. Either include it or remove the dependency array.","ArrayExpression",["149"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'streamID' is assigned a value but never used.","'setJobs' is assigned a value but never used.","'setActivePostings' is assigned a value but never used.",["147"],["148"],"'updateUserMetadata' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},"Update the dependencies array to be: [ethereum, setWeb3]",{"range":"152","text":"153"},[2156,2165],"[ethereum, setWeb3]"]