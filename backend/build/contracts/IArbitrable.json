{
  "contractName": "IArbitrable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrator\":\"The arbitrator giving the ruling.\",\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}}},\"kind\":\"dev\",\"methods\":{\"rule(uint256,uint256)\":{\"details\":\"Give a ruling for a dispute. Must be called by the arbitrator. The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\",\"params\":{\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\"}}},\"title\":\"IArbitrable Arbitrable interface. When developing arbitrable contracts, we need to: - Define the action taken when a ruling is received by the contract. - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/victor/kairos/backend/contracts/interfaces/IArbitrable.sol\":\"IArbitrable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/victor/kairos/backend/contracts/interfaces/IArbitrable.sol\":{\"keccak256\":\"0x1f239a63bd2b7bb743aff20da0cf4ad46408d77f34ef2b9a9002df5dbc827311\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5b296dc7ce9da41ae2405d454aa360dc85d289697a85972925f3cc97a405326a\",\"dweb:/ipfs/QmRzmwGGNuwTq9WZucbr3wQipsko6Ymgey7iW7NwQcjx2L\"]},\"/home/victor/kairos/backend/contracts/interfaces/IArbitrator.sol\":{\"keccak256\":\"0x1809c674bdf3c6a31f205828d0e4730610a960cdbb8d3917906d56db73a300c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c43f34f40a8ff85e9b9d7e59ff35b17a9764f237516b9f14a7e9585a7f1045c\",\"dweb:/ipfs/QmdHhaNQrADyyRtN8noEydh7z5WUXgFww94u6Cj7dmo91Z\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./IArbitrator.sol\";\n\n/**\n * @title IArbitrable\n * Arbitrable interface.\n * When developing arbitrable contracts, we need to:\n * - Define the action taken when a ruling is received by the contract.\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\n */\ninterface IArbitrable {\n    /**\n     * @dev To be raised when a ruling is given.\n     * @param _arbitrator The arbitrator giving the ruling.\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\n     * @param _ruling The ruling which was given.\n     */\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\n\n    /**\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".\n     */\n    function rule(uint256 _disputeID, uint256 _ruling) external;\n}",
  "sourcePath": "/home/victor/kairos/backend/contracts/interfaces/IArbitrable.sol",
  "ast": {
    "absolutePath": "/home/victor/kairos/backend/contracts/interfaces/IArbitrable.sol",
    "exportedSymbols": {
      "IArbitrable": [
        644
      ],
      "IArbitrator": [
        740
      ]
    },
    "id": 645,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 623,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:2"
      },
      {
        "absolutePath": "/home/victor/kairos/backend/contracts/interfaces/IArbitrator.sol",
        "file": "./IArbitrator.sol",
        "id": 624,
        "nodeType": "ImportDirective",
        "scope": 645,
        "sourceUnit": 741,
        "src": "61:27:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 625,
          "nodeType": "StructuredDocumentation",
          "src": "90:298:2",
          "text": " @title IArbitrable\n Arbitrable interface.\n When developing arbitrable contracts, we need to:\n - Define the action taken when a ruling is received by the contract.\n - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);"
        },
        "fullyImplemented": false,
        "id": 644,
        "linearizedBaseContracts": [
          644
        ],
        "name": "IArbitrable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 626,
              "nodeType": "StructuredDocumentation",
              "src": "417:241:2",
              "text": " @dev To be raised when a ruling is given.\n @param _arbitrator The arbitrator giving the ruling.\n @param _disputeID ID of the dispute in the Arbitrator contract.\n @param _ruling The ruling which was given."
            },
            "id": 635,
            "name": "Ruling",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 629,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_arbitrator",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "676:31:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IArbitrator_$740",
                    "typeString": "contract IArbitrator"
                  },
                  "typeName": {
                    "id": 628,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 627,
                      "name": "IArbitrator",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 740,
                      "src": "676:11:2"
                    },
                    "referencedDeclaration": 740,
                    "src": "676:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IArbitrator_$740",
                      "typeString": "contract IArbitrator"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 631,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_disputeID",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "709:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "709:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 633,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_ruling",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "737:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 632,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "737:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "675:78:2"
            },
            "src": "663:91:2"
          },
          {
            "documentation": {
              "id": 636,
              "nodeType": "StructuredDocumentation",
              "src": "760:394:2",
              "text": " @dev Give a ruling for a dispute. Must be called by the arbitrator.\n The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\n @param _disputeID ID of the dispute in the Arbitrator contract.\n @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\"."
            },
            "functionSelector": "311a6c56",
            "id": 643,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rule",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 641,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 638,
                  "mutability": "mutable",
                  "name": "_disputeID",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "1173:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 637,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1173:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 640,
                  "mutability": "mutable",
                  "name": "_ruling",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "1193:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 639,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1193:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1172:37:2"
            },
            "returnParameters": {
              "id": 642,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:2"
            },
            "scope": 644,
            "src": "1159:60:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 645,
        "src": "389:832:2"
      }
    ],
    "src": "36:1185:2"
  },
  "legacyAST": {
    "absolutePath": "/home/victor/kairos/backend/contracts/interfaces/IArbitrable.sol",
    "exportedSymbols": {
      "IArbitrable": [
        644
      ],
      "IArbitrator": [
        740
      ]
    },
    "id": 645,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 623,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:2"
      },
      {
        "absolutePath": "/home/victor/kairos/backend/contracts/interfaces/IArbitrator.sol",
        "file": "./IArbitrator.sol",
        "id": 624,
        "nodeType": "ImportDirective",
        "scope": 645,
        "sourceUnit": 741,
        "src": "61:27:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 625,
          "nodeType": "StructuredDocumentation",
          "src": "90:298:2",
          "text": " @title IArbitrable\n Arbitrable interface.\n When developing arbitrable contracts, we need to:\n - Define the action taken when a ruling is received by the contract.\n - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);"
        },
        "fullyImplemented": false,
        "id": 644,
        "linearizedBaseContracts": [
          644
        ],
        "name": "IArbitrable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 626,
              "nodeType": "StructuredDocumentation",
              "src": "417:241:2",
              "text": " @dev To be raised when a ruling is given.\n @param _arbitrator The arbitrator giving the ruling.\n @param _disputeID ID of the dispute in the Arbitrator contract.\n @param _ruling The ruling which was given."
            },
            "id": 635,
            "name": "Ruling",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 629,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_arbitrator",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "676:31:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IArbitrator_$740",
                    "typeString": "contract IArbitrator"
                  },
                  "typeName": {
                    "id": 628,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 627,
                      "name": "IArbitrator",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 740,
                      "src": "676:11:2"
                    },
                    "referencedDeclaration": 740,
                    "src": "676:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IArbitrator_$740",
                      "typeString": "contract IArbitrator"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 631,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_disputeID",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "709:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "709:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 633,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_ruling",
                  "nodeType": "VariableDeclaration",
                  "scope": 635,
                  "src": "737:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 632,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "737:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "675:78:2"
            },
            "src": "663:91:2"
          },
          {
            "documentation": {
              "id": 636,
              "nodeType": "StructuredDocumentation",
              "src": "760:394:2",
              "text": " @dev Give a ruling for a dispute. Must be called by the arbitrator.\n The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\n @param _disputeID ID of the dispute in the Arbitrator contract.\n @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\"."
            },
            "functionSelector": "311a6c56",
            "id": 643,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rule",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 641,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 638,
                  "mutability": "mutable",
                  "name": "_disputeID",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "1173:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 637,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1173:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 640,
                  "mutability": "mutable",
                  "name": "_ruling",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "1193:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 639,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1193:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1172:37:2"
            },
            "returnParameters": {
              "id": 642,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:2"
            },
            "scope": 644,
            "src": "1159:60:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 645,
        "src": "389:832:2"
      }
    ],
    "src": "36:1185:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.0+commit.c7dfd78e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-06-30T14:38:11.410Z",
  "devdoc": {
    "events": {
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrator": "The arbitrator giving the ruling.",
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "rule(uint256,uint256)": {
        "details": "Give a ruling for a dispute. Must be called by the arbitrator. The purpose of this function is to ensure that the address calling it has the right to rule on the contract.",
        "params": {
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\"."
        }
      }
    },
    "title": "IArbitrable Arbitrable interface. When developing arbitrable contracts, we need to: - Define the action taken when a ruling is received by the contract. - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}